"""empty message

Revision ID: f2da805e9817
Revises: 0e963b49b1a2
Create Date: 2023-09-04 08:01:19.677057

"""
from alembic import op
import sqlalchemy as sa

import geoalchemy2
import sqlmodel
import sqlalchemy_utils
from app.schemas.common_schema import IParticelleLivelloEnum, IPrgTypeEnum, IPrgStatusEnum # added


# revision identifiers, used by Alembic.
revision = 'f2da805e9817'
down_revision = '0e963b49b1a2'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Media',
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Media_id'), 'Media', ['id'], unique=False)
    op.create_table('Particelle',
    sa.Column('livello', sqlalchemy_utils.types.choice.ChoiceType(IParticelleLivelloEnum), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('comune', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sezione', sa.Integer(), nullable=True),
    sa.Column('foglio', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('allegato', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('sviluppo', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('numero', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_Particelle_geom', 'Particelle', ['geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_Particelle_id'), 'Particelle', ['id'], unique=False)
    op.create_table('Role',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Role_id'), 'Role', ['id'], unique=False)
    op.create_table('ImageMedia',
    sa.Column('file_format', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('media_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['media_id'], ['Media.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ImageMedia_id'), 'ImageMedia', ['id'], unique=False)
    op.create_table('User',
    sa.Column('birthdate', sa.DateTime(timezone=True), nullable=True),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('role_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('state', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('image_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['image_id'], ['ImageMedia.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['Role.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_User_email'), 'User', ['email'], unique=True)
    op.create_index(op.f('ix_User_hashed_password'), 'User', ['hashed_password'], unique=False)
    op.create_index(op.f('ix_User_id'), 'User', ['id'], unique=False)
    op.create_table('Prg',
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(IPrgStatusEnum), nullable=True),
    sa.Column('zona', sqlalchemy_utils.types.choice.ChoiceType(IPrgTypeEnum), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('db_id', sa.Integer(), nullable=False),
    sa.Column('area', sa.Integer(), nullable=False),
    sa.Column('id_area', sa.Integer(), nullable=False),
    sa.Column('comparto', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sul', sa.Integer(), nullable=False),
    sa.Column('scheda', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('frazione', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('articolo', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('proprieta', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_Prg_geom', 'Prg', ['geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_Prg_id'), 'Prg', ['id'], unique=False)
    op.create_table('Note',
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('prg_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('image_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['image_id'], ['ImageMedia.id'], ),
    sa.ForeignKeyConstraint(['prg_id'], ['Prg.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Note_id'), 'Note', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_Note_id'), table_name='Note')
    op.drop_table('Note')
    op.drop_index(op.f('ix_Prg_id'), table_name='Prg')
    op.drop_index('idx_Prg_geom', table_name='Prg', postgresql_using='gist')
    op.drop_table('Prg')
    op.drop_index(op.f('ix_User_id'), table_name='User')
    op.drop_index(op.f('ix_User_hashed_password'), table_name='User')
    op.drop_index(op.f('ix_User_email'), table_name='User')
    op.drop_table('User')
    op.drop_index(op.f('ix_ImageMedia_id'), table_name='ImageMedia')
    op.drop_table('ImageMedia')
    op.drop_index(op.f('ix_Role_id'), table_name='Role')
    op.drop_table('Role')
    op.drop_index(op.f('ix_Particelle_id'), table_name='Particelle')
    op.drop_index('idx_Particelle_geom', table_name='Particelle', postgresql_using='gist')
    op.drop_table('Particelle')
    op.drop_index(op.f('ix_Media_id'), table_name='Media')
    op.drop_table('Media')
    # ### end Alembic commands ###
